# Initial configuration file for doing experiments with Biophysical network
notes: "Energy dependent"
general:
  record:
    spikes: True
    weights: True
    multimeter:
      # define which variable do you want to record
      - ATP
  record_rate: 10 # record every x ms. Only for recorded variables
  simtime: 1500 # ms
  seed: 1
  module: "edlif_psc_alpha_0_module" 
neurons:
  ex:
    model: "edlif_psc_alpha_percent0_nestml__with_ed_stdp0_nestml"  # "edlif_psc_alpha_percent"
    params:
      energy_params:
        # Initial condition for ATP
        ATP:
          mean: 100
          std: 0
        # ATP production parameter
        K_ATP:
          mean: 0.1
          std: 0
        # action-potential energy consumption time-constant
        tau_ap:
          mean: 30
          std: 0
        # Time constant of synaptic consumption
        tau_syn_atp_in:
          mean: 20
          std: 0
        tau_syn_atp_ex:
          mean: 20
          std: 0
        # resting-potential consumption percent/ms
        E_rp:
          mean: 5  # %
          std: 0
        # housekeeping consumption percent/ms
        E_hk:
          mean: 5  # %
          std: 0
        # action potential consumption percent/spike
        E_ap:
          mean: 15  # %
          std: 0
        #synaptic consumption percent/spike
        E_syn_ex:
          mean: 8  # %
          std: 0
        E_syn_in:
          mean: 5  # %
          std: 0
        # sensitivity to energy imbalance
        gamma:
          mean: 10
          std: 0
      general_params:
        # synaptic time constants
        tau_syn_ex:
          mean: 6
          std: 1
        tau_syn_in:
          mean: 6
          std: 1
        # membrane time constant
        tau_m:
          mean: 2
          std: 0.1
        # capacitance
        C_m:
          mean: 250
          std: 12
        # refractory period
        t_ref:
          mean: 2
          std: 0.1
        I_e:
          mean: 0  #2000
          std: 0  #500
  in:
    model: "edlif_psc_alpha_percent0_nestml__with_ed_stdp0_nestml"  # "edlif_psc_alpha_percent"
    params:
      energy_params:
        # Initial condition for ATP
        ATP:
          mean: 100
          std: 0
        # ATP production parameter
        K_ATP:
          mean: 0.1
          std: 0
        # action-potential energy consumption time-constant
        tau_ap:
          mean: 30
          std: 0
        # Time constant of synaptic consumption
        tau_syn_atp_in:
          mean: 20
          std: 0
        tau_syn_atp_ex:
          mean: 20
          std: 0
        # resting-potential consumption percent/ms
        E_rp:
          mean: 5  # %
          std: 0
        # housekeeping consumption percent/ms
        E_hk:
          mean: 5  # %
          std: 0
        # action potential consumption percent/spike
        E_ap:
          mean: 15  # %
          std: 0
        #synaptic consumption percent/spike
        E_syn_ex:
          mean: 8  # %
          std: 0
        E_syn_in:
          mean: 5  # %
          std: 0
        # sensitivity to energy imbalance
        gamma:
          mean: 10
          std: 0
      general_params:
        # synaptic time constants
        tau_syn_ex:
          mean: 6
          std: 1
        tau_syn_in:
          mean: 6
          std: 1
        # membrane time constant
        tau_m:
          mean: 2
          std: 0.1
        # capacitance
        C_m:
          mean: 250
          std: 12
        # refractory period
        t_ref:
          mean: 2
          std: 0.1
        I_e:
          mean: 0  #2000
          std: 0
#  connecting populations
connections:
  # excitatory -> excitatory
  ex_ex:
    # connection parameters
    conn_spec:
      allow_autapses: True # bool
      allow_multapses: True # bool
      rule: "pairwise_bernoulli"
      p: 0.8  # 1 == all-to-all
    # synaptic parameters
    syn_spec:
      synapse_model: "ed_stdp0_nestml__with_edlif_psc_alpha_percent0_nestml"  
      params:
        mu_minus: 1
        mu_plus: 1
        lambda: 0.01
        alpha: 0.5
      w:
      # for this model the weight variable is called "w"
        dist: "exponential" # exponential, normal or uniform
        beta: 5  # beta param for exponential
        min:
        max:
      delay:
        dist: "uniform" # exponential, normal or uniform
        min: 0.1
        max: 2.5
      alpha:
        dist: "uniform"
        min: 0.5
        max: 3.1
      record: True
  # excitatory -> inhibitory
  ex_in:
    # connection parameters
    conn_spec:
      allow_autapses: True # bool
      allow_multapses: True # bool
      rule: "pairwise_bernoulli"
      p: 0.8  # 1 == all-to-all
    # synaptic parameters
    syn_spec:
      synapse_model: "static_synapse"
      params:
        mu_minus:
        mu_plus:
        lambda:
        alpha:
      weight:
        dist: "exponential" # exponential, normal or uniform
        beta: 5  # beta param for exponential
        min:
        max:
      delay:
        dist: "uniform" # exponential, normal or uniform
        min: 0.1
        max: 2.5
      alpha:
        dist:
        min:
        max:
      record: False
  # inhibitory -> inhibitory
  in_in:
    # connection parameters
    conn_spec:
      allow_autapses: True # bool
      allow_multapses: True # bool
      rule: "pairwise_bernoulli"
      p: 0.8  # 1 == all-to-all
    # synaptic parameters
    syn_spec:
      synapse_model: "static_synapse"
      params:
        mu_minus:
        mu_plus:
        lambda:
        alpha:
      weight:
        dist: "exponential" # exponential, normal or uniform
        beta: 5  # beta param for exponential
        min:
        max:
      delay:
        dist: "uniform" # exponential, normal or uniform
        min: 0.1
        max: 2.5
      alpha:
        dist:
        min:
        max:
      record: False
  # inhibitory -> excitatory
  in_ex:
    # connection parameters
    conn_spec:
      allow_autapses: True # bool
      allow_multapses: True # bool
      rule: "pairwise_bernoulli"
      p: 0.8  # 1 == all-to-all
    # synaptic parameters
    syn_spec:
      synapse_model: "static_synapse"
      params:
        mu_minus:
        mu_plus:
        lambda:
        alpha:
      weight:
        dist: "exponential" # exponential, normal or uniform
        beta: 5  # beta param for exponential
        min:
        max:
      delay:
        dist: "uniform" # exponential, normal or uniform
        min: 0.1
        max: 2.5
      alpha:
        dist:
        min:
        max:
      record: False
  params:
    stdp_decay: # for ATP dependent weights
    weight_mask:
    homeostatic_plasticity: False
network_layout:
  energy_dependent: True
  n_neurons: 30
  ex_in_ratio: 0.8  # n_exc = exc_inh_ratio*n_neurons
  positions:
    dist: "uniform"
    dim: 2 # number of spatial dimensions (2 or 3)
    pos_bounds:
      # in mm
      - -0.5
      - 0.5
external_sources:
  # subregions measurements
  subregion_measurements:
    record: True
    multimeter:
      - ATP
    record_rate: 10
    spike_recorder: True
  # external sources
  target_neurons_id:
  target_subregion:
    # here you can include different generators types with their own params
    generator_general_poisson:
      type: 'poisson_generator'
      active: True  # activate in the simulation
      params:
        rate: 100000  # mean rate Hz
        start: 1100
      conn_spec:
        radius: 1.5
        anchor:
          - 0.0
          - 0.0
    generator_general_poisson_ac:
      type: 'sinusoidal_poisson_generator'
      # f(t) = max(0, rate + amplitude * sin(2*pi*frequency*t + phase*pi/180))
      active: True  # activate in the simulation
      params:
        rate: 110000  # mean rate spikes/second
        amplitude: 50000  # Firing rate modulation in spikes/second
        frequency: 5  # mod frequency Hz
        phase: 0 # modulation phase in degree [0-360]
        stop: 1000  # stop simulation
        #individual_spike_trains: True  # if True, then all target neurons will
        # receive different spike trains. If false, all neurons receive the
        # same spike train
      conn_spec:
        radius: 1.5
        anchor:
          - 0.0
          - 0.0
    generator_general_ac:
      type: 'ac_generator'
      active: False  # activate in the simulation
      params:
        amplitude: 300  # amplitude of sine current pA
        offset: 1800  # constant amplitud offse pA
        frequency: 20 # in Hz
        phase: 0  # phase of sine in degrees [0-360]
      conn_spec:
        radius: 1.5
        anchor:
          - 0.0
          - 0.0
    generator_1_poisson:
      type: 'poisson_generator'
      active: False  # activate in the simulation
      params:
        rate: 200000  # mean rate Hz
      conn_spec:
        radius: 0.16
        anchor:
          - 0.3
          - 0.3
