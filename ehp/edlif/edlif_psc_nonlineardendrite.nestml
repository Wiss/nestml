"""
edlif_ - Simple current based energy-dependent leaky integrate and fire

Description
+++++++++++
Neuron model used in test_edlif.py

This model uses the iaf_psc_exp_nonlineardendrite.nestml (https://github.com/nest/nestml/blob/master/tests/nest_tests/resources/iaf_psc_exp_nonlineardendrite.nestml) as templete

Refrences
+++++++++
.. [1] Jaras I, Harada T, Orchard ME, Maldonado PE, Vergara RC. 
       Extending the integrate-and-fire model to account for metabolic 
       dependencies. 
       Eur J Neurosci. 2021 Aug;54(4):5249-5260. 
       doi: 10.1111/ejn.15326. Epub 2021 Jul 16. PMID: 34109698.
"""

neuron edlif_psc_nonlineardendrite:

  state:
    r integer = 0                 # counts number of tick during the refractory period
    V_abs mV = 0 mV
    ATP real = 10**(-4)       # Available ATP mol/L
    E_ap_dyn real = 0  # TODO: dynamical (with kernel) action potential consumption 
    new_spike int = 0
    
  end

  equations:
    # currents
    # opt 1
    #kernel I_kernel_inh = (e / tau_syn_inh) * t * exp(-t / tau_syn_inh)
    #kernel I_kernel_exc = (e / tau_syn_exc) * t * exp(-t / tau_syn_exc)
    # opt 2
    # current kernels
    kernel I_kernel_inh = exp(-t / tau_syn_inh) # inhibitory
    kernel I_kernel_exc = exp(-t / tau_syn_exc) # excitatory
    inline I_syn pA = convolve(I_kernel_exc, exc_spikes) - convolve(I_kernel_inh, inh_spikes)
    
    # voltages
    recordable inline V_m mV = V_abs + E_L    # Membrane potential
    
    # ATP
    # dynamical action potential consumption
    kernel ATP_ap_kernel = t / tau_ap**2 * exp(-t / tau_ap) # t / (tau_ap ** 2) * exp(-t / tau_ap)
    kernel the_delta = delta(t)
    inline spike_now = convolve(the_delta, new_spike)
    inline E_ap_dyn = convolve(ATP_ap_kernel, spike_now)
    #inline ATP real = convolve(ATP_ap_kernel, spikes)         # Available ATP
    recordable inline ATP_c ms**-1 = (E_hk + E_rp + E_ap_dyn)*o_t  # ATP consumption 
    
    # extra step inbetween
    inline ATP_aux real = ATP - ATP_c/o_t
    recordable inline ATP_s ms**-1 = (ATP_h - ATP_aux)* K_atp + ATP_basal*o_t # ATP supply
    # no extra step
    #recordable inline ATP_s ms**-1 = (ATP_h - ATP)* K_atp + ATP_basal*o_t # ATP supply
    
    
    
    # ODEs
    V_abs' = -V_abs / tau_m + (I_syn + I_e + I_stim) / C_m 
    ATP' = ATP_s - ATP_c
  end

  parameters:
    C_m     pF = 250 pF       # Capacitance of the membrane
    tau_m   ms = 10 ms        # Membrane time constant
    tau_syn_inh ms = 2 ms     # Time constant of synaptic current
    tau_syn_exc ms = 2 ms     # Time constant of synaptic current
    t_ref   ms = 2 ms         # Duration of refractory period
    E_L     mV = -70 mV       # Resting potential
    V_reset mV = -70 mV - E_L # Reset potential of the membrane
    V_th    mV = -55 mV - E_L  # Spike threshold
    
    # constant external input current
    I_e pA = 0 pA

    # ATP-related parameters
    K_atp ms**-1 = 1 ms**-1 # this should be 1/ms
    o_t ms**-1 = 1 ms**-1 # just s trick
    tau_ap ms = 3945.6 ms                  # action-potential energy-consumption time constant
    avogadro real = 6.02214*10**(23)            # avogadro
    ATP_h real = 10**(-4)              # homeostatic ATP level in mol/L
    E_rp real = 6.82*10**(5)/avogadro  # resting-potential consumption mol/ms
    E_hk real = 5.38*10**(5)/avogadro       # housekeeping consuption mol/ms
    E_ap real = 2 #2.65*10**(8)/avogadro  # action potential consumption mol
    ATP_basal real = E_rp + E_hk        # basal ATP production mol/ms
    
    #TODO: include synaptic energy consumptions
  end

  internals:
    RefractoryCounts integer = steps(t_ref)    # refractory time in steps
  end

  input:
    exc_spikes pA <- excitatory spike
    inh_spikes pA <- inhibitory spike
    I_stim pA <- continuous
  end

  output: spike

  update:
    # because of ATP dynamics we need to solve odes all the time
    integrate_odes()
    
    #if ATP <= 0:
    #  ATP_
    
    if r == 0: # neuron not refractory
      #integrate_odes()
    else: # neuron is absolute refractory
      r = r - 1
    end

    if V_abs >= V_th: # threshold crossing
      # A supra-threshold membrane potential should never be observable.
      # The reset at the time of threshold crossing enables accurate
      # integration independent of the computation step size, see [2,3] for
      # details.
      r = RefractoryCounts
      #V_abs = V_reset_corrected(ATP)
      #V_m = beta(ATP) * V_th
      #beta = 1 + scale_alpha * (2 - (2 / (1 + exp(-(ATP_h - ATP) / ATP_h * gamma))))
      #scale_alpha = V_reset / V_th - 1
      V_abs = V_reset
      
      # E_ap_dynamic
      new_spike = delta
      #E_ap_dyn += convolve(ATP_ap_kernel, E_ap) * o_t
      #ATP += E_ap_dyn
      new_spike = 1
      emit_spike()
    else:
      new_spike = 0
    end
  end
  
  function V_reset_corrected(ATP, V_reset) real:
    # calculate V_reset using ATP dependence
    V_reset_atp = V_reset
    return V_reset_atp
  
end
