"""
edlif_ - Simple current based energy-dependent leaky integrate and fire

Description
+++++++++++

Refrences
+++++++++
.. [1] Jaras I, Harada T, Orchard ME, Maldonado PE, Vergara RC. 
       Extending the integrate-and-fire model to account for metabolic 
       dependencies. 
       Eur J Neurosci. 2021 Aug;54(4):5249-5260. 
       doi: 10.1111/ejn.15326. Epub 2021 Jul 16. PMID: 34109698.
"""

neuron edlif_psc:

  state:
    r integer = 0                 # counts number of tick during the refractory period
    V_abs mV = 0 mV
    ATP mV = 0 mV 
  end

  equations:
    kernel I_kernel_inh = (e / tau_syn_inh) * t * exp(-t / tau_syn_inh)
    kernel I_kernel_exc = (e / tau_syn_exc) * t * exp(-t / tau_syn_exc)
    recordable inline V_m mV = V_abs + E_L    # Membrane potential
    inline I pA = convolve(I_kernel_exc, exc_spikes) - convolve(I_kernel_inh, inh_spikes) + I_e + I_stim
    V_abs' = -V_abs / tau_m + I / C_m

    # ATP dynamics
    ATP' = -ATP * K_atp
  end

  parameters:
    C_m     pF = 250 pF       # Capacitance of the membrane
    tau_m   ms = 10 ms        # Membrane time constant
    tau_syn_inh ms = 2 ms     # Time constant of synaptic current
    tau_syn_exc ms = 2 ms     # Time constant of synaptic current
    t_ref   ms = 2 ms         # Duration of refractory period
    E_L     mV = -70 mV       # Resting potential
    V_reset mV = -70 mV - E_L # Reset potential of the membrane
    V_th    mV = -55 mV - E_L  # Spike threshold
    
    # constant external input current
    I_e pA = 0 pA

    # ATP-related parameters
    K_atp ms**-1 = 10 ms**-1
  end

  internals:
    RefractoryCounts integer = steps(t_ref)    # refractory time in steps
  end

  input:
    exc_spikes pA <- excitatory spike
    inh_spikes pA <- inhibitory spike
    I_stim pA <- continuous
  end

  output: spike

  update:
    if r == 0: # neuron not refractory
      integrate_odes()
    else: # neuron is absolute refractory
      r = r - 1
    end

    if V_abs >= V_th: # threshold crossing
      # A supra-threshold membrane potential should never be observable.
      # The reset at the time of threshold crossing enables accurate
      # integration independent of the computation step size, see [2,3] for
      # details.
      r = RefractoryCounts
      V_abs = V_reset
      ATP = ATP + 1
      emit_spike()
    end

  end

end
