"""
edlif - Simple current based energy-dependent leaky integrate and fire

Description
+++++++++++
Neuron model used in test_edlif.py

This model uses the iaf_psc_exp_nonlineardendrite.nestml (https://github.com/nest/nestml/blob/master/tests/nest_tests/resources/iaf_psc_exp_nonlineardendrite.nestml) as templete

Refrences
+++++++++
.. [1] Jaras I, Harada T, Orchard ME, Maldonado PE, Vergara RC. 
       Extending the integrate-and-fire model to account for metabolic 
       dependencies. 
       Eur J Neurosci. 2021 Aug;54(4):5249-5260. 
       doi: 10.1111/ejn.15326. Epub 2021 Jul 16. PMID: 34109698.
"""

neuron edlif_psc_percent:

  state:
    r integer = 0                    # counts number of tick during the refractory period
    V_abs mV = 0 mV
    ATP real = 100                    # Available ATP percent
    E_ap_tr real = 0.                # Action potential consumption trace 
    #E_ap_tr2 real = 0.                # Action potential consumption trace 
    #E_ap_der real = 0.               # Action potential consumption trace 
    homeostatic_s_enabled real = 1.  # Doesn't allow negative ATP production
    alp real = 0
    bet real = 0
  end

  equations:
    # currents
    # opt 1
    #kernel I_kernel_inh = (e / tau_syn_inh) * t * exp(-t / tau_syn_inh)
    #kernel I_kernel_exc = (e / tau_syn_exc) * t * exp(-t / tau_syn_exc)
    # opt 2
    # current kernels
    kernel I_kernel_inh = exp(-t / tau_syn_inh) # inhibitory
    kernel I_kernel_exc = exp(-t / tau_syn_exc) # excitatory
    inline I_syn pA = convolve(I_kernel_exc, exc_spikes) - convolve(I_kernel_inh, inh_spikes)
    
    # voltages
    recordable inline V_m mV = V_abs + E_L    # Membrane potential
    
    # ATP consumption
    recordable inline E_ap_c real = E_ap_tr / tau_ap * E_ap / o_t  # reescale to obtain E_ap consumption 
    recordable inline ATP_c real = (ATP_basal + E_ap_c)  # ATP consumption. TODO: include E_syn_tr 
    
    # ATP supply
    # "extra step" inbetween, So ATP_s considers ATP_c
    #inline ATP_aux real = ATP - ATP_c/o_t
    #recordable inline ATP_s real = (ATP_h - ATP_aux) * K_ATP * homeostatic_s_enabled + ATP_basal 
    # no "extra step"
    recordable inline ATP_s real = (ATP_h - ATP) * K_ATP * homeostatic_s_enabled + ATP_basal
    
    # ODEs
    V_abs' = -V_abs / tau_m + (I_syn + I_e + I_stim) / C_m 
    ATP' = (ATP_s - ATP_c) * o_t 
    #ATP' = (-(ATP - ATP_h) * K_ATP * homeostatic_s_enabled - E_ap_c) * o_t 
    #E_ap_tr' = - E_ap_tr / tau_ap # This one is not working properly, should
    # define the E_ap_tr update inside the update block
    #E_ap_tr2' = E_ap_der - E_ap_tr2 / tau_ap
    #E_ap_der' = - E_ap_der / tau_ap
    # TODO: fix E_ap_tr ODE using:  ATP_ap_kernel = t / tau_ap**2 * exp(-t / tau_ap) # t / (tau_ap ** 2) * exp(-t / tau_ap)
  end

  parameters:
    C_m     pF = 250 pF         # Capacitance of the membrane
    tau_m   ms = 10 ms          # Membrane time constant
    tau_syn_inh ms = 2 ms       # Time constant of synaptic current
    tau_syn_exc ms = 2 ms       # Time constant of synaptic current
    t_ref   ms = 5 ms           # Duration of refractory period
    E_L     mV = -70 mV         # Resting potential
    V_reset mV = -70 mV - E_L   # Reset potential of the membrane
    V_th    mV = -55 mV - E_L   # Spike threshold
    
    # constant external input current
    I_e pA = 0 pA

    # ATP-related parameters 
    # TODO: fix physical units
    K_ATP real = 1                  # ATP production parameter. TODO: fix units 1/ms
    o_t ms**-1 = 1 ms**-1           # to convert to 1/ms units
    tau_ap ms = 6500 ms               # action-potential energy-consumption time constant
    # update tau_ap maintaining tau_m/tau_ap relationship
    # should be something around 650*tau_m
    ATP_h real = 100                # homeostatic ATP level in percent
    E_rp real = 5                   # resting-potential consumption percent/ms
    E_hk real = 5                   # housekeeping consuption percent/ms
    E_ap real = 15                  # action potential consumption percent/spike
    ATP_basal real = E_rp + E_hk    # basal ATP production percent/ms
    gamma  real = 16                # sensitivity to energy imbalance

    # precision
    gsl_error_tol real = 10**(-3)   # absolute error of an integration step

    # TODO: 
    # - include synaptic energy consumptions and kernels 
 
  end

  internals:
    RefractoryCounts integer = steps(t_ref)    # refractory time in steps
  end

  input:
    exc_spikes pA <- excitatory spike
    inh_spikes pA <- inhibitory spike
    I_stim pA <- continuous
  end

  output: spike

  update:
    E_ap_tr *= exp(-resolution() / tau_ap) # not sure why this implementation works,
    # possibly because of some stability problems (?)
    integrate_odes()
    
    if r > 0:
      # neuron is absolute refractory
      r = r - 1
      # clamp voltage
      V_abs = V_reset_corrected(ATP)
    end
    
    if ATP > ATP_h:
      # disable homeostatic production if ATP > ATP_h
      homeostatic_s_enabled = 0
    else:
      homeostatic_s_enabled = 1
    end
    
    if V_abs >= V_th: # threshold crossing
      # Voltage above threshold
      r = RefractoryCounts
      # TODO: include ATP-dependent V_reset
      #V_abs = V_reset_corrected(ATP)
      #V_m = beta(ATP) * V_th
      #beta = 1 + scale_alpha * (2 - (2 / (1 + exp(-(ATP_h - ATP) / ATP_h * gamma))))
      #scale_alpha = V_reset / V_th - 1
      V_abs = V_reset_corrected(ATP)

      # AP energy trace  
      E_ap_tr += 1
      #E_ap_der += 1
    
      # printing some stuff
      alp = alpha()
      bet = beta(ATP)
      println("alpha: {alp}")
      println("beta: {bet}")
      println("V_abs: {V_abs}")

      emit_spike()
    end
  end
  function alpha() real:
    # calculate alpha for ATP-dependent V_reset
    return V_reset / (V_th) -1  # in the paper is E_L/V_th, bu bc we are 
    # working with V_abs, here is V_reset/ V_th (TODO: check)
  end
  function beta(ATP real) real:
    # calculate beta for ATP-dependent V_reset
    return  1 + alpha() * (2 - (2 / (1 + exp(-(ATP_h - ATP) / ATP_h * gamma ))))
  end
  function V_reset_corrected(ATP real) mV:
    # calculate V_reset using ATP dependence
    return beta(ATP) * V_th
  end
end  
